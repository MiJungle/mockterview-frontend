{"version":3,"file":"next-s3-upload.cjs.production.min.js","sources":["../src/pages/api/s3-upload.ts","../src/hooks/use-s3-upload.tsx","../src/utils/image-data.ts"],"sourcesContent":["import { NextApiRequest, NextApiResponse } from 'next';\nimport {\n  STSClient,\n  GetFederationTokenCommand,\n  STSClientConfig,\n} from '@aws-sdk/client-sts';\nimport { v4 as uuidv4 } from 'uuid';\n\ntype NextRouteHandler = (\n  req: NextApiRequest,\n  res: NextApiResponse\n) => Promise<void>;\n\ntype Configure = (options: Options) => Handler;\ntype Handler = NextRouteHandler & { configure: Configure };\n\ntype Options = {\n  key?: (req: NextApiRequest, filename: string) => string | Promise<string>;\n};\n\nlet makeRouteHandler = (options: Options = {}): Handler => {\n  let route: NextRouteHandler = async function(req, res) {\n    let missing = missingEnvs();\n    if (missing.length > 0) {\n      res\n        .status(500)\n        .json({ error: `Next S3 Upload: Missing ENVs ${missing.join(', ')}` });\n    } else {\n      let config: STSClientConfig = {\n        credentials: {\n          accessKeyId: process.env.S3_UPLOAD_KEY as string,\n          secretAccessKey: process.env.S3_UPLOAD_SECRET as string,\n        },\n        region: process.env.S3_UPLOAD_REGION,\n      };\n\n      let bucket = process.env.S3_UPLOAD_BUCKET;\n\n      let filename = req.body.filename;\n      let key = options.key\n        ? await Promise.resolve(options.key(req, filename))\n        : `next-s3-uploads/${uuidv4()}/${filename.replace(/\\s/g, '-')}`;\n\n      let policy = {\n        Statement: [\n          {\n            Sid: 'Stmt1S3UploadAssets',\n            Effect: 'Allow',\n            Action: ['s3:PutObject'],\n            Resource: [`arn:aws:s3:::${bucket}/${key}`],\n          },\n        ],\n      };\n\n      let sts = new STSClient(config);\n\n      let command = new GetFederationTokenCommand({\n        Name: 'S3UploadWebToken',\n        Policy: JSON.stringify(policy),\n        DurationSeconds: 60 * 60, // 1 hour\n      });\n\n      let token = await sts.send(command);\n      res.statusCode = 200;\n\n      res.status(200).json({\n        token,\n        key,\n        bucket,\n        region: process.env.S3_UPLOAD_REGION,\n      });\n    }\n  };\n\n  let configure = (options: Options) => makeRouteHandler(options);\n\n  return Object.assign(route, { configure });\n};\n\n// This code checks the for missing env vars that this\n// API route needs.\n//\n// Why does this code look like this? See this issue!\n// https://github.com/ryanto/next-s3-upload/issues/50\n//\nlet missingEnvs = (): string[] => {\n  let keys = [];\n  if (!process.env.S3_UPLOAD_KEY) {\n    keys.push('S3_UPLOAD_KEY');\n  }\n  if (!process.env.S3_UPLOAD_SECRET) {\n    keys.push('S3_UPLOAD_SECRET');\n  }\n  if (!process.env.S3_UPLOAD_REGION) {\n    keys.push('S3_UPLOAD_REGION');\n  }\n  if (!process.env.S3_UPLOAD_BUCKET) {\n    keys.push('S3_UPLOAD_BUCKET');\n  }\n  return keys;\n};\n\nlet APIRoute = makeRouteHandler();\n\nexport { APIRoute };\n","import React, { ChangeEvent, ReactElement } from 'react';\nimport { useRef, useState } from 'react';\nimport { forwardRef } from 'react';\nimport {\n  CompleteMultipartUploadCommandOutput,\n  S3Client,\n} from '@aws-sdk/client-s3';\nimport { Upload } from '@aws-sdk/lib-storage';\n\ntype FileInputProps = {\n  onChange: (\n    file: File | undefined,\n    event: ChangeEvent<HTMLInputElement>\n  ) => void;\n  [index: string]: any; // Indexer to spread props\n};\n\nlet FileInput = forwardRef<HTMLInputElement, FileInputProps>(\n  ({ onChange = () => {}, ...restOfProps }, forwardedRef) => {\n    let handleChange = (event: ChangeEvent<HTMLInputElement>): void => {\n      let file = event.target?.files?.[0];\n      onChange(file, event);\n    };\n\n    return (\n      <input\n        onChange={handleChange}\n        {...restOfProps}\n        ref={forwardedRef}\n        type=\"file\"\n      />\n    );\n  }\n);\n\ntype TrackedFile = {\n  file: File;\n  progress: number;\n  uploaded: number;\n  size: number;\n};\n\ntype UseS3UploadOptions = {\n  endpoint?: string;\n};\n\ntype UploadResult = {\n  url: string;\n  bucket: string;\n  key: string;\n};\n\ntype RequestOptions = {\n  body: Record<string, any>;\n  headers: HeadersInit;\n};\n\ntype EndpointOptions = {\n  request: RequestOptions;\n};\n\ntype UploadToS3Options = {\n  endpoint?: EndpointOptions;\n};\n\ntype UploadToS3 = (\n  file: File,\n  options?: UploadToS3Options\n) => Promise<UploadResult>;\n\ntype UseS3UploadTools = {\n  FileInput: (props: any) => ReactElement<HTMLInputElement>;\n  openFileDialog: () => void;\n  uploadToS3: UploadToS3;\n  files: TrackedFile[];\n  resetFiles: () => void;\n};\n\ntype UseS3Upload = (options?: UseS3UploadOptions) => UseS3UploadTools;\n\nexport const useS3Upload: UseS3Upload = (options = {}) => {\n  let ref = useRef<HTMLInputElement>();\n  let [files, setFiles] = useState<TrackedFile[]>([]);\n\n  let openFileDialog = () => {\n    if (ref.current) {\n      ref.current.value = '';\n      ref.current?.click();\n    }\n  };\n\n  let resetFiles = () => {\n    setFiles([]);\n  };\n\n  let endpoint = options.endpoint ?? '/api/s3-upload';\n\n  let uploadToS3: UploadToS3 = async (file, options = {}) => {\n    let filename = encodeURIComponent(file.name);\n\n    let requestExtras = options?.endpoint?.request ?? {\n      headers: {},\n      body: {},\n    };\n\n    let body = {\n      filename,\n      ...requestExtras.body,\n    };\n\n    let headers = {\n      ...requestExtras.headers,\n      'Content-Type': 'application/json',\n    };\n\n    let res = await fetch(endpoint, {\n      method: 'POST',\n      headers,\n      body: JSON.stringify(body),\n    });\n\n    let data = await res.json();\n\n    if (data.error) {\n      console.error(data.error);\n      throw data.error;\n    } else {\n      let client = new S3Client({\n        credentials: {\n          accessKeyId: data.token.Credentials.AccessKeyId,\n          secretAccessKey: data.token.Credentials.SecretAccessKey,\n          sessionToken: data.token.Credentials.SessionToken,\n        },\n        region: data.region,\n      });\n\n      let params = {\n        Bucket: data.bucket,\n        Key: data.key,\n        Body: file,\n        CacheControl: 'max-age=630720000, public',\n        ContentType: file.type,\n      };\n\n      // at some point make this configurable\n      // let uploadOptions = {\n      //   partSize: 100 * 1024 * 1024,\n      //   queueSize: 1,\n      // };\n\n      let s3Upload = new Upload({\n        client,\n        params,\n      });\n\n      setFiles(files => [\n        ...files,\n        { file, progress: 0, uploaded: 0, size: file.size },\n      ]);\n\n      s3Upload.on('httpUploadProgress', progress => {\n        let uploaded = progress.loaded ?? 0;\n        let size = progress.total ?? 0;\n\n        if (uploaded) {\n          setFiles(files =>\n            files.map(trackedFile =>\n              trackedFile.file === file\n                ? {\n                    file,\n                    uploaded,\n                    size,\n                    progress: size ? (uploaded / size) * 100 : 0,\n                  }\n                : trackedFile\n            )\n          );\n        }\n      });\n\n      let uploadResult = (await s3Upload.done()) as CompleteMultipartUploadCommandOutput;\n\n      let url =\n        uploadResult.Bucket && uploadResult.Key\n          ? `https://${uploadResult.Bucket}.s3.${data.region}.amazonaws.com/${uploadResult.Key}`\n          : '';\n\n      return {\n        url,\n        bucket: uploadResult.Bucket ?? '',\n        key: uploadResult.Key ?? '',\n      };\n    }\n  };\n\n  return {\n    FileInput: (props: any) => (\n      <FileInput {...props} ref={ref} style={{ display: 'none' }} />\n    ),\n    openFileDialog,\n    uploadToS3,\n    files,\n    resetFiles,\n  };\n};\n","interface ImageData {\n  height: number | undefined;\n  width: number | undefined;\n}\n\nexport const getImageData = (file: File | Blob): Promise<ImageData> => {\n  return new Promise(resolve => {\n    if (file.type.split('/')?.[0] === 'image') {\n      let img = new Image();\n      let objectUrl = URL.createObjectURL(file);\n      img.onload = (event: Event) => {\n        let image = event.target as HTMLImageElement;\n        resolve({ height: image.height, width: image.width });\n        URL.revokeObjectURL(objectUrl);\n      };\n      img.src = objectUrl;\n    } else {\n      resolve({ height: undefined, width: undefined });\n    }\n  });\n};\n"],"names":["makeRouteHandler","options","Object","assign","req","res","missing","missingEnvs","length","_context","status","json","error","join","config","credentials","accessKeyId","process","env","S3_UPLOAD_KEY","secretAccessKey","S3_UPLOAD_SECRET","region","S3_UPLOAD_REGION","bucket","S3_UPLOAD_BUCKET","filename","body","key","Promise","resolve","uuidv4","replace","policy","Statement","Sid","Effect","Action","Resource","sts","STSClient","command","GetFederationTokenCommand","Name","Policy","JSON","stringify","DurationSeconds","send","token","statusCode","configure","keys","push","APIRoute","FileInput","forwardRef","forwardedRef","onChange","restOfProps","React","event","file","target","_event$target","files","_event$target$files","ref","type","split","_file$type$split","img","Image","objectUrl","URL","createObjectURL","onload","image","height","width","revokeObjectURL","src","undefined","useRef","useState","setFiles","endpoint","props","style","display","openFileDialog","current","value","_ref$current","click","uploadToS3","encodeURIComponent","name","requestExtras","_options","_options$endpoint2","request","headers","Content-Type","fetch","method","data","console","client","S3Client","Credentials","AccessKeyId","SecretAccessKey","sessionToken","SessionToken","s3Upload","Upload","params","Bucket","Key","Body","CacheControl","ContentType","progress","uploaded","size","on","loaded","total","map","trackedFile","done","url","uploadResult","resetFiles"],"mappings":"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"}