{"version":3,"file":"next-s3-upload.esm.js","sources":["../src/pages/api/s3-upload.ts","../src/hooks/use-s3-upload.tsx","../src/utils/image-data.ts"],"sourcesContent":["import { NextApiRequest, NextApiResponse } from 'next';\nimport {\n  STSClient,\n  GetFederationTokenCommand,\n  STSClientConfig,\n} from '@aws-sdk/client-sts';\nimport { v4 as uuidv4 } from 'uuid';\n\ntype NextRouteHandler = (\n  req: NextApiRequest,\n  res: NextApiResponse\n) => Promise<void>;\n\ntype Configure = (options: Options) => Handler;\ntype Handler = NextRouteHandler & { configure: Configure };\n\ntype Options = {\n  key?: (req: NextApiRequest, filename: string) => string | Promise<string>;\n};\n\nlet makeRouteHandler = (options: Options = {}): Handler => {\n  let route: NextRouteHandler = async function(req, res) {\n    let missing = missingEnvs();\n    if (missing.length > 0) {\n      res\n        .status(500)\n        .json({ error: `Next S3 Upload: Missing ENVs ${missing.join(', ')}` });\n    } else {\n      let config: STSClientConfig = {\n        credentials: {\n          accessKeyId: process.env.S3_UPLOAD_KEY as string,\n          secretAccessKey: process.env.S3_UPLOAD_SECRET as string,\n        },\n        region: process.env.S3_UPLOAD_REGION,\n      };\n\n      let bucket = process.env.S3_UPLOAD_BUCKET;\n\n      let filename = req.body.filename;\n      let key = options.key\n        ? await Promise.resolve(options.key(req, filename))\n        : `next-s3-uploads/${uuidv4()}/${filename.replace(/\\s/g, '-')}`;\n\n      let policy = {\n        Statement: [\n          {\n            Sid: 'Stmt1S3UploadAssets',\n            Effect: 'Allow',\n            Action: ['s3:PutObject'],\n            Resource: [`arn:aws:s3:::${bucket}/${key}`],\n          },\n        ],\n      };\n\n      let sts = new STSClient(config);\n\n      let command = new GetFederationTokenCommand({\n        Name: 'S3UploadWebToken',\n        Policy: JSON.stringify(policy),\n        DurationSeconds: 60 * 60, // 1 hour\n      });\n\n      let token = await sts.send(command);\n      res.statusCode = 200;\n\n      res.status(200).json({\n        token,\n        key,\n        bucket,\n        region: process.env.S3_UPLOAD_REGION,\n      });\n    }\n  };\n\n  let configure = (options: Options) => makeRouteHandler(options);\n\n  return Object.assign(route, { configure });\n};\n\n// This code checks the for missing env vars that this\n// API route needs.\n//\n// Why does this code look like this? See this issue!\n// https://github.com/ryanto/next-s3-upload/issues/50\n//\nlet missingEnvs = (): string[] => {\n  let keys = [];\n  if (!process.env.S3_UPLOAD_KEY) {\n    keys.push('S3_UPLOAD_KEY');\n  }\n  if (!process.env.S3_UPLOAD_SECRET) {\n    keys.push('S3_UPLOAD_SECRET');\n  }\n  if (!process.env.S3_UPLOAD_REGION) {\n    keys.push('S3_UPLOAD_REGION');\n  }\n  if (!process.env.S3_UPLOAD_BUCKET) {\n    keys.push('S3_UPLOAD_BUCKET');\n  }\n  return keys;\n};\n\nlet APIRoute = makeRouteHandler();\n\nexport { APIRoute };\n","import React, { ChangeEvent, ReactElement } from 'react';\nimport { useRef, useState } from 'react';\nimport { forwardRef } from 'react';\nimport {\n  CompleteMultipartUploadCommandOutput,\n  S3Client,\n} from '@aws-sdk/client-s3';\nimport { Upload } from '@aws-sdk/lib-storage';\n\ntype FileInputProps = {\n  onChange: (\n    file: File | undefined,\n    event: ChangeEvent<HTMLInputElement>\n  ) => void;\n  [index: string]: any; // Indexer to spread props\n};\n\nlet FileInput = forwardRef<HTMLInputElement, FileInputProps>(\n  ({ onChange = () => {}, ...restOfProps }, forwardedRef) => {\n    let handleChange = (event: ChangeEvent<HTMLInputElement>): void => {\n      let file = event.target?.files?.[0];\n      onChange(file, event);\n    };\n\n    return (\n      <input\n        onChange={handleChange}\n        {...restOfProps}\n        ref={forwardedRef}\n        type=\"file\"\n      />\n    );\n  }\n);\n\ntype TrackedFile = {\n  file: File;\n  progress: number;\n  uploaded: number;\n  size: number;\n};\n\ntype UseS3UploadOptions = {\n  endpoint?: string;\n};\n\ntype UploadResult = {\n  url: string;\n  bucket: string;\n  key: string;\n};\n\ntype RequestOptions = {\n  body: Record<string, any>;\n  headers: HeadersInit;\n};\n\ntype EndpointOptions = {\n  request: RequestOptions;\n};\n\ntype UploadToS3Options = {\n  endpoint?: EndpointOptions;\n};\n\ntype UploadToS3 = (\n  file: File,\n  options?: UploadToS3Options\n) => Promise<UploadResult>;\n\ntype UseS3UploadTools = {\n  FileInput: (props: any) => ReactElement<HTMLInputElement>;\n  openFileDialog: () => void;\n  uploadToS3: UploadToS3;\n  files: TrackedFile[];\n  resetFiles: () => void;\n};\n\ntype UseS3Upload = (options?: UseS3UploadOptions) => UseS3UploadTools;\n\nexport const useS3Upload: UseS3Upload = (options = {}) => {\n  let ref = useRef<HTMLInputElement>();\n  let [files, setFiles] = useState<TrackedFile[]>([]);\n\n  let openFileDialog = () => {\n    if (ref.current) {\n      ref.current.value = '';\n      ref.current?.click();\n    }\n  };\n\n  let resetFiles = () => {\n    setFiles([]);\n  };\n\n  let endpoint = options.endpoint ?? '/api/s3-upload';\n\n  let uploadToS3: UploadToS3 = async (file, options = {}) => {\n    let filename = encodeURIComponent(file.name);\n\n    let requestExtras = options?.endpoint?.request ?? {\n      headers: {},\n      body: {},\n    };\n\n    let body = {\n      filename,\n      ...requestExtras.body,\n    };\n\n    let headers = {\n      ...requestExtras.headers,\n      'Content-Type': 'application/json',\n    };\n\n    let res = await fetch(endpoint, {\n      method: 'POST',\n      headers,\n      body: JSON.stringify(body),\n    });\n\n    let data = await res.json();\n\n    if (data.error) {\n      console.error(data.error);\n      throw data.error;\n    } else {\n      let client = new S3Client({\n        credentials: {\n          accessKeyId: data.token.Credentials.AccessKeyId,\n          secretAccessKey: data.token.Credentials.SecretAccessKey,\n          sessionToken: data.token.Credentials.SessionToken,\n        },\n        region: data.region,\n      });\n\n      let params = {\n        Bucket: data.bucket,\n        Key: data.key,\n        Body: file,\n        CacheControl: 'max-age=630720000, public',\n        ContentType: file.type,\n      };\n\n      // at some point make this configurable\n      // let uploadOptions = {\n      //   partSize: 100 * 1024 * 1024,\n      //   queueSize: 1,\n      // };\n\n      let s3Upload = new Upload({\n        client,\n        params,\n      });\n\n      setFiles(files => [\n        ...files,\n        { file, progress: 0, uploaded: 0, size: file.size },\n      ]);\n\n      s3Upload.on('httpUploadProgress', progress => {\n        let uploaded = progress.loaded ?? 0;\n        let size = progress.total ?? 0;\n\n        if (uploaded) {\n          setFiles(files =>\n            files.map(trackedFile =>\n              trackedFile.file === file\n                ? {\n                    file,\n                    uploaded,\n                    size,\n                    progress: size ? (uploaded / size) * 100 : 0,\n                  }\n                : trackedFile\n            )\n          );\n        }\n      });\n\n      let uploadResult = (await s3Upload.done()) as CompleteMultipartUploadCommandOutput;\n\n      let url =\n        uploadResult.Bucket && uploadResult.Key\n          ? `https://${uploadResult.Bucket}.s3.${data.region}.amazonaws.com/${uploadResult.Key}`\n          : '';\n\n      return {\n        url,\n        bucket: uploadResult.Bucket ?? '',\n        key: uploadResult.Key ?? '',\n      };\n    }\n  };\n\n  return {\n    FileInput: (props: any) => (\n      <FileInput {...props} ref={ref} style={{ display: 'none' }} />\n    ),\n    openFileDialog,\n    uploadToS3,\n    files,\n    resetFiles,\n  };\n};\n","interface ImageData {\n  height: number | undefined;\n  width: number | undefined;\n}\n\nexport const getImageData = (file: File | Blob): Promise<ImageData> => {\n  return new Promise(resolve => {\n    if (file.type.split('/')?.[0] === 'image') {\n      let img = new Image();\n      let objectUrl = URL.createObjectURL(file);\n      img.onload = (event: Event) => {\n        let image = event.target as HTMLImageElement;\n        resolve({ height: image.height, width: image.width });\n        URL.revokeObjectURL(objectUrl);\n      };\n      img.src = objectUrl;\n    } else {\n      resolve({ height: undefined, width: undefined });\n    }\n  });\n};\n"],"names":["makeRouteHandler","options","route","req","res","missing","missingEnvs","length","status","json","error","join","config","credentials","accessKeyId","process","env","S3_UPLOAD_KEY","secretAccessKey","S3_UPLOAD_SECRET","region","S3_UPLOAD_REGION","bucket","S3_UPLOAD_BUCKET","filename","body","key","Promise","resolve","uuidv4","replace","policy","Statement","Sid","Effect","Action","Resource","sts","STSClient","command","GetFederationTokenCommand","Name","Policy","JSON","stringify","DurationSeconds","send","token","statusCode","configure","Object","assign","keys","push","APIRoute","FileInput","forwardRef","forwardedRef","onChange","restOfProps","handleChange","event","file","target","files","React","ref","type","useS3Upload","useRef","useState","setFiles","openFileDialog","current","value","click","resetFiles","endpoint","uploadToS3","encodeURIComponent","name","requestExtras","request","headers","fetch","method","data","console","client","S3Client","Credentials","AccessKeyId","SecretAccessKey","sessionToken","SessionToken","params","Bucket","Key","Body","CacheControl","ContentType","s3Upload","Upload","progress","uploaded","size","on","loaded","total","map","trackedFile","done","uploadResult","url","props","style","display","getImageData","split","img","Image","objectUrl","URL","createObjectURL","onload","image","height","width","revokeObjectURL","src","undefined"],"mappings":"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"}