'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var clientSts = require('@aws-sdk/client-sts');
var uuid = require('uuid');
var React = require('react');
var React__default = _interopDefault(React);
var clientS3 = require('@aws-sdk/client-s3');
var libStorage = require('@aws-sdk/lib-storage');

function _regeneratorRuntime() {
  _regeneratorRuntime = function () {
    return exports;
  };
  var exports = {},
    Op = Object.prototype,
    hasOwn = Op.hasOwnProperty,
    $Symbol = "function" == typeof Symbol ? Symbol : {},
    iteratorSymbol = $Symbol.iterator || "@@iterator",
    asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator",
    toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";
  function define(obj, key, value) {
    return Object.defineProperty(obj, key, {
      value: value,
      enumerable: !0,
      configurable: !0,
      writable: !0
    }), obj[key];
  }
  try {
    define({}, "");
  } catch (err) {
    define = function (obj, key, value) {
      return obj[key] = value;
    };
  }
  function wrap(innerFn, outerFn, self, tryLocsList) {
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator,
      generator = Object.create(protoGenerator.prototype),
      context = new Context(tryLocsList || []);
    return generator._invoke = function (innerFn, self, context) {
      var state = "suspendedStart";
      return function (method, arg) {
        if ("executing" === state) throw new Error("Generator is already running");
        if ("completed" === state) {
          if ("throw" === method) throw arg;
          return doneResult();
        }
        for (context.method = method, context.arg = arg;;) {
          var delegate = context.delegate;
          if (delegate) {
            var delegateResult = maybeInvokeDelegate(delegate, context);
            if (delegateResult) {
              if (delegateResult === ContinueSentinel) continue;
              return delegateResult;
            }
          }
          if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) {
            if ("suspendedStart" === state) throw state = "completed", context.arg;
            context.dispatchException(context.arg);
          } else "return" === context.method && context.abrupt("return", context.arg);
          state = "executing";
          var record = tryCatch(innerFn, self, context);
          if ("normal" === record.type) {
            if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue;
            return {
              value: record.arg,
              done: context.done
            };
          }
          "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg);
        }
      };
    }(innerFn, self, context), generator;
  }
  function tryCatch(fn, obj, arg) {
    try {
      return {
        type: "normal",
        arg: fn.call(obj, arg)
      };
    } catch (err) {
      return {
        type: "throw",
        arg: err
      };
    }
  }
  exports.wrap = wrap;
  var ContinueSentinel = {};
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}
  var IteratorPrototype = {};
  define(IteratorPrototype, iteratorSymbol, function () {
    return this;
  });
  var getProto = Object.getPrototypeOf,
    NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype);
  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function (method) {
      define(prototype, method, function (arg) {
        return this._invoke(method, arg);
      });
    });
  }
  function AsyncIterator(generator, PromiseImpl) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if ("throw" !== record.type) {
        var result = record.arg,
          value = result.value;
        return value && "object" == typeof value && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) {
          invoke("next", value, resolve, reject);
        }, function (err) {
          invoke("throw", err, resolve, reject);
        }) : PromiseImpl.resolve(value).then(function (unwrapped) {
          result.value = unwrapped, resolve(result);
        }, function (error) {
          return invoke("throw", error, resolve, reject);
        });
      }
      reject(record.arg);
    }
    var previousPromise;
    this._invoke = function (method, arg) {
      function callInvokeWithMethodAndArg() {
        return new PromiseImpl(function (resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }
      return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
    };
  }
  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (undefined === method) {
      if (context.delegate = null, "throw" === context.method) {
        if (delegate.iterator.return && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel;
        context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method");
      }
      return ContinueSentinel;
    }
    var record = tryCatch(method, delegate.iterator, context.arg);
    if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel;
    var info = record.arg;
    return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel);
  }
  function pushTryEntry(locs) {
    var entry = {
      tryLoc: locs[0]
    };
    1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry);
  }
  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal", delete record.arg, entry.completion = record;
  }
  function Context(tryLocsList) {
    this.tryEntries = [{
      tryLoc: "root"
    }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0);
  }
  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) return iteratorMethod.call(iterable);
      if ("function" == typeof iterable.next) return iterable;
      if (!isNaN(iterable.length)) {
        var i = -1,
          next = function next() {
            for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next;
            return next.value = undefined, next.done = !0, next;
          };
        return next.next = next;
      }
    }
    return {
      next: doneResult
    };
  }
  function doneResult() {
    return {
      value: undefined,
      done: !0
    };
  }
  return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) {
    var ctor = "function" == typeof genFun && genFun.constructor;
    return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name));
  }, exports.mark = function (genFun) {
    return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun;
  }, exports.awrap = function (arg) {
    return {
      __await: arg
    };
  }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
    return this;
  }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {
    void 0 === PromiseImpl && (PromiseImpl = Promise);
    var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
    return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) {
      return result.done ? result.value : iter.next();
    });
  }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () {
    return this;
  }), define(Gp, "toString", function () {
    return "[object Generator]";
  }), exports.keys = function (object) {
    var keys = [];
    for (var key in object) keys.push(key);
    return keys.reverse(), function next() {
      for (; keys.length;) {
        var key = keys.pop();
        if (key in object) return next.value = key, next.done = !1, next;
      }
      return next.done = !0, next;
    };
  }, exports.values = values, Context.prototype = {
    constructor: Context,
    reset: function (skipTempReset) {
      if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined);
    },
    stop: function () {
      this.done = !0;
      var rootRecord = this.tryEntries[0].completion;
      if ("throw" === rootRecord.type) throw rootRecord.arg;
      return this.rval;
    },
    dispatchException: function (exception) {
      if (this.done) throw exception;
      var context = this;
      function handle(loc, caught) {
        return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught;
      }
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i],
          record = entry.completion;
        if ("root" === entry.tryLoc) return handle("end");
        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc"),
            hasFinally = hasOwn.call(entry, "finallyLoc");
          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
            if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
          } else {
            if (!hasFinally) throw new Error("try statement without catch or finally");
            if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
          }
        }
      }
    },
    abrupt: function (type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }
      finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null);
      var record = finallyEntry ? finallyEntry.completion : {};
      return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record);
    },
    complete: function (record, afterLoc) {
      if ("throw" === record.type) throw record.arg;
      return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel;
    },
    finish: function (finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel;
      }
    },
    catch: function (tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if ("throw" === record.type) {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }
      throw new Error("illegal catch attempt");
    },
    delegateYield: function (iterable, resultName, nextLoc) {
      return this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      }, "next" === this.method && (this.arg = undefined), ContinueSentinel;
    }
  }, exports;
}
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }
  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}
function _asyncToGenerator(fn) {
  return function () {
    var self = this,
      args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);
      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }
      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }
      _next(undefined);
    });
  };
}
function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}

var makeRouteHandler = function makeRouteHandler(options) {
  if (options === void 0) {
    options = {};
  }
  var route = /*#__PURE__*/function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(req, res) {
      var missing, config, bucket, filename, key, policy, sts, command, token;
      return _regeneratorRuntime().wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              missing = missingEnvs();
              if (!(missing.length > 0)) {
                _context.next = 5;
                break;
              }
              res.status(500).json({
                error: "Next S3 Upload: Missing ENVs " + missing.join(', ')
              });
              _context.next = 24;
              break;
            case 5:
              config = {
                credentials: {
                  accessKeyId: process.env.S3_UPLOAD_KEY,
                  secretAccessKey: process.env.S3_UPLOAD_SECRET
                },
                region: process.env.S3_UPLOAD_REGION
              };
              bucket = process.env.S3_UPLOAD_BUCKET;
              filename = req.body.filename;
              if (!options.key) {
                _context.next = 14;
                break;
              }
              _context.next = 11;
              return Promise.resolve(options.key(req, filename));
            case 11:
              _context.t0 = _context.sent;
              _context.next = 15;
              break;
            case 14:
              _context.t0 = "next-s3-uploads/" + uuid.v4() + "/" + filename.replace(/\s/g, '-');
            case 15:
              key = _context.t0;
              policy = {
                Statement: [{
                  Sid: 'Stmt1S3UploadAssets',
                  Effect: 'Allow',
                  Action: ['s3:PutObject'],
                  Resource: ["arn:aws:s3:::" + bucket + "/" + key]
                }]
              };
              sts = new clientSts.STSClient(config);
              command = new clientSts.GetFederationTokenCommand({
                Name: 'S3UploadWebToken',
                Policy: JSON.stringify(policy),
                DurationSeconds: 60 * 60
              });
              _context.next = 21;
              return sts.send(command);
            case 21:
              token = _context.sent;
              res.statusCode = 200;
              res.status(200).json({
                token: token,
                key: key,
                bucket: bucket,
                region: process.env.S3_UPLOAD_REGION
              });
            case 24:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));
    return function route(_x, _x2) {
      return _ref.apply(this, arguments);
    };
  }();
  var configure = function configure(options) {
    return makeRouteHandler(options);
  };
  return Object.assign(route, {
    configure: configure
  });
};
// This code checks the for missing env vars that this
// API route needs.
//
// Why does this code look like this? See this issue!
// https://github.com/ryanto/next-s3-upload/issues/50
//
var missingEnvs = function missingEnvs() {
  var keys = [];
  if (!process.env.S3_UPLOAD_KEY) {
    keys.push('S3_UPLOAD_KEY');
  }
  if (!process.env.S3_UPLOAD_SECRET) {
    keys.push('S3_UPLOAD_SECRET');
  }
  if (!process.env.S3_UPLOAD_REGION) {
    keys.push('S3_UPLOAD_REGION');
  }
  if (!process.env.S3_UPLOAD_BUCKET) {
    keys.push('S3_UPLOAD_BUCKET');
  }
  return keys;
};
var APIRoute = /*#__PURE__*/makeRouteHandler();

var _excluded = ["onChange"];
var _FileInput = /*#__PURE__*/React.forwardRef(function (_ref, forwardedRef) {
  var _ref$onChange = _ref.onChange,
    onChange = _ref$onChange === void 0 ? function () {} : _ref$onChange,
    restOfProps = _objectWithoutPropertiesLoose(_ref, _excluded);
  var handleChange = function handleChange(event) {
    var _event$target, _event$target$files;
    var file = (_event$target = event.target) == null ? void 0 : (_event$target$files = _event$target.files) == null ? void 0 : _event$target$files[0];
    onChange(file, event);
  };
  return React__default.createElement("input", Object.assign({
    onChange: handleChange
  }, restOfProps, {
    ref: forwardedRef,
    type: "file"
  }));
});
var useS3Upload = function useS3Upload(options) {
  var _options$endpoint;
  if (options === void 0) {
    options = {};
  }
  var ref = React.useRef();
  var _useState = React.useState([]),
    files = _useState[0],
    setFiles = _useState[1];
  var openFileDialog = function openFileDialog() {
    if (ref.current) {
      var _ref$current;
      ref.current.value = '';
      (_ref$current = ref.current) == null ? void 0 : _ref$current.click();
    }
  };
  var resetFiles = function resetFiles() {
    setFiles([]);
  };
  var endpoint = (_options$endpoint = options.endpoint) != null ? _options$endpoint : '/api/s3-upload';
  var uploadToS3 = /*#__PURE__*/function () {
    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(file, options) {
      var _options$endpoint$req, _options, _options$endpoint2;
      var filename, requestExtras, body, headers, res, data, _uploadResult$Bucket, _uploadResult$Key, client, params, s3Upload, uploadResult, url;
      return _regeneratorRuntime().wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (options === void 0) {
                options = {};
              }
              filename = encodeURIComponent(file.name);
              requestExtras = (_options$endpoint$req = (_options = options) == null ? void 0 : (_options$endpoint2 = _options.endpoint) == null ? void 0 : _options$endpoint2.request) != null ? _options$endpoint$req : {
                headers: {},
                body: {}
              };
              body = _extends({
                filename: filename
              }, requestExtras.body);
              headers = _extends({}, requestExtras.headers, {
                'Content-Type': 'application/json'
              });
              _context.next = 7;
              return fetch(endpoint, {
                method: 'POST',
                headers: headers,
                body: JSON.stringify(body)
              });
            case 7:
              res = _context.sent;
              _context.next = 10;
              return res.json();
            case 10:
              data = _context.sent;
              if (!data.error) {
                _context.next = 16;
                break;
              }
              console.error(data.error);
              throw data.error;
            case 16:
              client = new clientS3.S3Client({
                credentials: {
                  accessKeyId: data.token.Credentials.AccessKeyId,
                  secretAccessKey: data.token.Credentials.SecretAccessKey,
                  sessionToken: data.token.Credentials.SessionToken
                },
                region: data.region
              });
              params = {
                Bucket: data.bucket,
                Key: data.key,
                Body: file,
                CacheControl: 'max-age=630720000, public',
                ContentType: file.type
              }; // at some point make this configurable
              // let uploadOptions = {
              //   partSize: 100 * 1024 * 1024,
              //   queueSize: 1,
              // };
              s3Upload = new libStorage.Upload({
                client: client,
                params: params
              });
              setFiles(function (files) {
                return [].concat(files, [{
                  file: file,
                  progress: 0,
                  uploaded: 0,
                  size: file.size
                }]);
              });
              s3Upload.on('httpUploadProgress', function (progress) {
                var _progress$loaded, _progress$total;
                var uploaded = (_progress$loaded = progress.loaded) != null ? _progress$loaded : 0;
                var size = (_progress$total = progress.total) != null ? _progress$total : 0;
                if (uploaded) {
                  setFiles(function (files) {
                    return files.map(function (trackedFile) {
                      return trackedFile.file === file ? {
                        file: file,
                        uploaded: uploaded,
                        size: size,
                        progress: size ? uploaded / size * 100 : 0
                      } : trackedFile;
                    });
                  });
                }
              });
              _context.next = 23;
              return s3Upload.done();
            case 23:
              uploadResult = _context.sent;
              url = uploadResult.Bucket && uploadResult.Key ? "https://" + uploadResult.Bucket + ".s3." + data.region + ".amazonaws.com/" + uploadResult.Key : '';
              return _context.abrupt("return", {
                url: url,
                bucket: (_uploadResult$Bucket = uploadResult.Bucket) != null ? _uploadResult$Bucket : '',
                key: (_uploadResult$Key = uploadResult.Key) != null ? _uploadResult$Key : ''
              });
            case 26:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));
    return function uploadToS3(_x, _x2) {
      return _ref2.apply(this, arguments);
    };
  }();
  return {
    FileInput: function FileInput(props) {
      return React__default.createElement(_FileInput, Object.assign({}, props, {
        ref: ref,
        style: {
          display: 'none'
        }
      }));
    },
    openFileDialog: openFileDialog,
    uploadToS3: uploadToS3,
    files: files,
    resetFiles: resetFiles
  };
};

var getImageData = function getImageData(file) {
  return new Promise(function (resolve) {
    var _file$type$split;
    if (((_file$type$split = file.type.split('/')) == null ? void 0 : _file$type$split[0]) === 'image') {
      var img = new Image();
      var objectUrl = URL.createObjectURL(file);
      img.onload = function (event) {
        var image = event.target;
        resolve({
          height: image.height,
          width: image.width
        });
        URL.revokeObjectURL(objectUrl);
      };
      img.src = objectUrl;
    } else {
      resolve({
        height: undefined,
        width: undefined
      });
    }
  });
};

exports.APIRoute = APIRoute;
exports.getImageData = getImageData;
exports.useS3Upload = useS3Upload;
//# sourceMappingURL=next-s3-upload.cjs.development.js.map
